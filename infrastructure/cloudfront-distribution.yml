AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFront CDN Distribution for Podcasto Audio Delivery'

Parameters:
  S3BucketName:
    Type: String
    Default: podcasto-podcasts
    Description: Name of the S3 bucket containing audio files

  S3BucketRegion:
    Type: String
    Default: us-east-1
    Description: AWS region where the S3 bucket is located

  PriceClass:
    Type: String
    Default: PriceClass_All
    AllowedValues:
      - PriceClass_All
      - PriceClass_200
      - PriceClass_100
    Description: CloudFront price class (All = 400+ edge locations, 200 = exclude expensive regions, 100 = US/EU only)

  CacheTTL:
    Type: Number
    Default: 86400
    Description: Default cache TTL in seconds (86400 = 1 day)

  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name for tagging

Resources:
  # Origin Access Control for secure S3 access
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: 'Origin Access Control for Podcasto S3 bucket'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'Podcasto Audio CDN - ${Environment}'
        Enabled: true
        HttpVersion: http2and3
        PriceClass: !Ref PriceClass

        # Origin Configuration (S3 Bucket)
        Origins:
          - Id: !Sub 'S3-${S3BucketName}'
            DomainName: !Sub '${S3BucketName}.s3.${S3BucketRegion}.amazonaws.com'
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''  # Empty for OAC
            ConnectionAttempts: 3
            ConnectionTimeout: 10

        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${S3BucketName}'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true

          # Managed Cache Policy: CachingOptimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6

          # Managed Origin Request Policy: CORS-S3Origin
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf

          # Response Headers Policy (optional - for CORS)
          # Uncomment if needed:
          # ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c  # CORS-with-preflight

        # Custom Error Responses
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300

        # Logging disabled - enable later with dedicated logging bucket if needed
        # AWS best practice: Use separate S3 bucket with ACLs enabled for CloudFront logs
        # Logging:
        #   Bucket: !Sub 'podcasto-cloudfront-logs.s3.amazonaws.com'
        #   Prefix: 'cloudfront-logs/'
        #   IncludeCookies: false

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-distribution'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: Podcasto
        - Key: ManagedBy
          Value: CloudFormation

  # S3 Bucket Policy - Update manually after stack creation
  # Cannot be managed by CloudFormation if policy already exists
  # Run this command after stack creation to update bucket policy:
  #
  # aws s3api put-bucket-policy --bucket podcasto-podcasts --policy '{
  #   "Version": "2012-10-17",
  #   "Statement": [{
  #     "Sid": "AllowCloudFrontServicePrincipalReadOnly",
  #     "Effect": "Allow",
  #     "Principal": {"Service": "cloudfront.amazonaws.com"},
  #     "Action": "s3:GetObject",
  #     "Resource": "arn:aws:s3:::podcasto-podcasts/*",
  #     "Condition": {
  #       "StringEquals": {
  #         "AWS:SourceArn": "arn:aws:cloudfront::ACCOUNT_ID:distribution/DISTRIBUTION_ID"
  #       }
  #     }
  #   }]
  # }'

Outputs:
  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  DistributionDomainName:
    Description: CloudFront Distribution Domain Name (use for CLOUDFRONT_DOMAIN env var)
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  DistributionARN:
    Description: CloudFront Distribution ARN
    Value: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}'
    Export:
      Name: !Sub '${AWS::StackName}-ARN'

  OriginAccessControlId:
    Description: Origin Access Control ID
    Value: !GetAtt CloudFrontOriginAccessControl.Id
    Export:
      Name: !Sub '${AWS::StackName}-OACId'

  SetupInstructions:
    Description: Next steps after stack creation
    Value: !Sub |
      CloudFront distribution created successfully!

      1. Wait 10-20 minutes for distribution to deploy (Status: Enabled)
      2. Add environment variable to Next.js app:
         CLOUDFRONT_DOMAIN=${CloudFrontDistribution.DomainName}
      3. Test CloudFront URL:
         https://${CloudFrontDistribution.DomainName}/podcasts/YOUR_PODCAST/YOUR_EPISODE/audio/file.wav
      4. Monitor cache hit rate in CloudFront console
      5. Review cost savings after 1 week
