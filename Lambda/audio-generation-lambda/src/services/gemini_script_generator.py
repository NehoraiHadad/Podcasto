"""
Gemini Script Generator Service
Uses Google Gemini to generate natural conversation scripts from Telegram data
"""

import os
from typing import Dict, Any

from google import genai
from google.genai import types
from utils.logging import get_logger

logger = get_logger(__name__)


class GeminiScriptGenerator:
    """Generates natural conversation scripts using Google Gemini AI"""

    def __init__(self):
        """Initialize the Google Gemini client"""
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")

        self.client = genai.Client(api_key=api_key)
        self.model = "gemini-2.0-flash"

    def generate_script(
        self, telegram_data: Dict[str, Any], podcast_config: Dict[str, Any] = None, episode_id: str = None
    ) -> str:
        """
        Generate a natural conversation script from Telegram data

        Args:
            telegram_data: Raw Telegram data with messages
            podcast_config: Podcast configuration including language and speaker info
            episode_id: Episode ID for voice-aware script generation

        Returns:
            Generated conversation script as string
        """
        logger.info("[GEMINI_SCRIPT] Starting conversation script generation")

        # Get configuration
        config = podcast_config or {}
        language = config.get("language", "en")
        speaker1_gender = config.get("speaker1_gender", "male")
        speaker2_gender = config.get("speaker2_gender", "female")

        logger.info(f"[GEMINI_SCRIPT] Generating script in language: {language}")
        logger.info(f"[GEMINI_SCRIPT] Speaker genders: Speaker1={speaker1_gender}, Speaker2={speaker2_gender}")
        if episode_id:
            logger.info(f"[GEMINI_SCRIPT] Episode ID for voice-aware generation: {episode_id}")

        # Generate script using AI with configured language and gender awareness
        script = self._generate_ai_script(telegram_data, config, episode_id)

        logger.info(f"[GEMINI_SCRIPT] Generated script with {len(script)} characters")
        return script

    def _generate_ai_script(
        self, telegram_data: Dict[str, Any], podcast_config: Dict[str, Any], episode_id: str = None
    ) -> str:
        """Generate natural conversation script using Gemini AI with gender awareness"""

        # Get configuration
        speaker1_role = podcast_config.get("speaker1_role", "Host")
        speaker2_role = podcast_config.get("speaker2_role", "Expert")
        speaker1_gender = podcast_config.get("speaker1_gender", "male")
        speaker2_gender = podcast_config.get("speaker2_gender", "female")
        podcast_name = podcast_config.get("podcast_name", "Daily Podcast")
        target_duration = podcast_config.get("target_duration_minutes", 10)
        language = podcast_config.get("language", "en")
        additional_instructions = podcast_config.get("additional_instructions", "")

        # Build the prompt with raw telegram data and gender awareness
        prompt = self._build_script_prompt(
            telegram_data=telegram_data,
            language=language,
            speaker1_role=speaker1_role,
            speaker2_role=speaker2_role,
            speaker1_gender=speaker1_gender,
            speaker2_gender=speaker2_gender,
            podcast_name=podcast_name,
            target_duration=target_duration,
            additional_instructions=additional_instructions,
            episode_id=episode_id,
            content_analysis=podcast_config.get('content_analysis')
        )

        try:
            # Generate script using Gemini
            contents = [
                types.Content(
                    role="user",
                    parts=[types.Part.from_text(text=prompt)],
                ),
            ]

            config = types.GenerateContentConfig(
                temperature=0.8,
                max_output_tokens=32768,  # Increased to allow longer scripts
            )

            response = self.client.models.generate_content(
                model=self.model,
                contents=contents,
                config=config,
            )

            if (
                response.candidates
                and response.candidates[0].content
                and response.candidates[0].content.parts
            ):
                script_text = response.candidates[0].content.parts[0].text
                if script_text:
                    cleaned_script = script_text.strip()
                    # Validate script doesn't contain placeholders
                    self._validate_script_content(cleaned_script)
                    return cleaned_script

            raise Exception("No script generated by Gemini")

        except Exception as e:
            logger.error(f"[GEMINI_SCRIPT] Error generating script: {str(e)}")
            raise Exception(f"Failed to generate conversation script: {str(e)}")

    def _build_script_prompt(
        self,
        telegram_data: Dict[str, Any],
        language: str,
        speaker1_role: str,
        speaker2_role: str,
        speaker1_gender: str,
        speaker2_gender: str,
        podcast_name: str,
        target_duration: int,
        additional_instructions: str,
        episode_id: str = None,
        content_analysis: str = None,
    ) -> str:
        """Build the conversation script generation prompt with gender awareness"""
        
        # Get voice information for this episode
        voice_info = ""
        if episode_id:
            from .voice_config import VoiceConfigManager
            voice_manager = VoiceConfigManager()
            
            # Get the actual voices that will be used
            speaker1_voice = voice_manager.get_voice_for_speaker(
                speaker_role="speaker1", gender=speaker1_gender, randomize=False
            )
            speaker2_voice = voice_manager.get_voice_for_speaker(
                speaker_role="speaker2", gender=speaker2_gender, randomize=True, episode_id=episode_id
            )
            
            voice_info = f"""
VOICE SELECTION FOR THIS EPISODE:
- {speaker1_role} will use voice: {speaker1_voice} (consistent across episodes)
- {speaker2_role} will use voice: {speaker2_voice} (unique to this episode)

This voice information should influence the conversation style and personality traits."""

        # Content analysis information
        content_info = ""
        if content_analysis:
            content_info = f"""
CONTENT ANALYSIS:
- Content Type: {content_analysis.get('content_type', 'general')}
- Speaker Role Selection: {speaker2_role} (confidence: {content_analysis.get('confidence', 0.5):.2f})
- Analysis Reasoning: {content_analysis.get('reasoning', 'Dynamic role selection based on content')}

The {speaker2_role} should demonstrate expertise and knowledge specific to {content_analysis.get('content_type', 'general')} topics."""

        # Build comprehensive prompt
        conversation_prompt = f"""
You are an expert podcast script writer specializing in natural, engaging conversations between two speakers.

{content_info}

PODCAST INFORMATION:
- Podcast Name: {podcast_name}
- Target Duration: {target_duration} minutes
- Language: {language}

SPEAKER CONFIGURATION:
- Speaker 1: {speaker1_role} ({speaker1_gender})
- Speaker 2: {speaker2_role} ({speaker2_gender})

{voice_info}

CONTENT TO DISCUSS:
{self._format_telegram_content(telegram_data)}

ADDITIONAL INSTRUCTIONS:
{additional_instructions}

SCRIPT REQUIREMENTS:
1. Create a natural, flowing conversation between {speaker1_role} and {speaker2_role}
2. The {speaker1_role} should guide the conversation and ask insightful questions
3. The {speaker2_role} should provide expert analysis and insights appropriate to their role and the content type
4. Use natural speech patterns, including appropriate pauses, emphasis, and conversational elements
5. Target approximately {target_duration} minutes of spoken content
6. Maintain audience engagement throughout
7. Include smooth transitions between topics
8. End with a natural conclusion

PLACEHOLDER PROHIBITION:
- NEVER use placeholder text like "שם המשפחה", "[Name]", "[Details]", or similar
- ALL content must be complete and ready for immediate use
- If specific information is missing, create realistic examples or skip those details
- Every sentence must be fully formed and ready to be spoken

FORMAT:
Use this exact format for the script:

{speaker1_role}: [First speaker's dialogue]

{speaker2_role}: [Second speaker's dialogue]

{speaker1_role}: [Continue conversation...]

Generate a complete, engaging podcast script now:"""

        return conversation_prompt

    def _validate_script_content(self, script: str) -> None:
        """
        Validate that the script doesn't contain placeholder text that needs filling
        
        Args:
            script: The generated script text
            
        Raises:
            Exception: If placeholder text is detected
        """
        # Common placeholder patterns in Hebrew and English
        placeholder_patterns = [
            "שם המשפחה",  # family name in Hebrew
            "שם פרטי",     # first name in Hebrew
            "[insert",     # common bracket placeholders
            "[name]",      # name placeholder
            "[family name]", # family name placeholder
            "[first name]", # first name placeholder
            "___",         # underscores for filling
            "...",         # ellipsis suggesting continuation
            "וכו'",        # Hebrew etc.
            "etc.",        # English etc.
            "TBD",         # To Be Determined
            "TODO",        # TODO items
            "<placeholder>", # XML-style placeholders
            "{name}",      # Template-style placeholders
            "{family}",    # Template-style placeholders
        ]
        
        script_lower = script.lower()
        
        for pattern in placeholder_patterns:
            if pattern.lower() in script_lower:
                logger.warning(f"[GEMINI_SCRIPT] Detected placeholder pattern: '{pattern}' in script")
                # Don't raise exception, just log warning for now to avoid breaking existing functionality
                # raise Exception(f"Script contains placeholder text: '{pattern}'. Please regenerate.")
        
        logger.debug("[GEMINI_SCRIPT] Script validation passed - no obvious placeholders detected")
