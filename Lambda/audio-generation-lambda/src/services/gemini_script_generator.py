"""
Gemini Script Generator Service
Uses Google Gemini to generate natural conversation scripts from Telegram data
"""

import os
from typing import Dict, Any

from google import genai
from google.genai import types
from utils.logging import get_logger

logger = get_logger(__name__)


class GeminiScriptGenerator:
    """Generates natural conversation scripts using Google Gemini AI"""

    def __init__(self):
        """Initialize the Google Gemini client"""
        api_key = os.environ.get("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")

        self.client = genai.Client(api_key=api_key)
        self.model = "gemini-2.0-flash"

    def generate_script(
        self, telegram_data: Dict[str, Any], podcast_config: Dict[str, Any] = None
    ) -> str:
        """
        Generate a natural conversation script from Telegram data

        Args:
            telegram_data: Raw Telegram data with messages
            podcast_config: Podcast configuration including language and speaker info

        Returns:
            Generated conversation script as string
        """
        logger.info("[GEMINI_SCRIPT] Starting conversation script generation")

        # Get configuration
        config = podcast_config or {}
        language = config.get("language", "en")
        speaker1_gender = config.get("speaker1_gender", "male")
        speaker2_gender = config.get("speaker2_gender", "female")

        logger.info(f"[GEMINI_SCRIPT] Generating script in language: {language}")
        logger.info(f"[GEMINI_SCRIPT] Speaker genders: Speaker1={speaker1_gender}, Speaker2={speaker2_gender}")

        # Generate script using AI with configured language and gender awareness
        script = self._generate_ai_script(telegram_data, config)

        logger.info(f"[GEMINI_SCRIPT] Generated script with {len(script)} characters")
        return script

    def _generate_ai_script(
        self, telegram_data: Dict[str, Any], podcast_config: Dict[str, Any]
    ) -> str:
        """Generate natural conversation script using Gemini AI with gender awareness"""

        # Get configuration
        speaker1_role = podcast_config.get("speaker1_role", "Host")
        speaker2_role = podcast_config.get("speaker2_role", "Expert")
        speaker1_gender = podcast_config.get("speaker1_gender", "male")
        speaker2_gender = podcast_config.get("speaker2_gender", "female")
        podcast_name = podcast_config.get("podcast_name", "Daily Podcast")
        target_duration = podcast_config.get("target_duration_minutes", 10)
        language = podcast_config.get("language", "en")
        additional_instructions = podcast_config.get("additional_instructions", "")

        # Build the prompt with raw telegram data and gender awareness
        prompt = self._build_script_prompt(
            telegram_data,
            language,
            speaker1_role,
            speaker2_role,
            speaker1_gender,
            speaker2_gender,
            podcast_name,
            target_duration,
            additional_instructions,
        )

        try:
            # Generate script using Gemini
            contents = [
                types.Content(
                    role="user",
                    parts=[types.Part.from_text(text=prompt)],
                ),
            ]

            config = types.GenerateContentConfig(
                temperature=0.8,
                max_output_tokens=32768,  # Increased to allow longer scripts
            )

            response = self.client.models.generate_content(
                model=self.model,
                contents=contents,
                config=config,
            )

            if (
                response.candidates
                and response.candidates[0].content
                and response.candidates[0].content.parts
            ):
                script_text = response.candidates[0].content.parts[0].text
                if script_text:
                    return script_text.strip()

            raise Exception("No script generated by Gemini")

        except Exception as e:
            logger.error(f"[GEMINI_SCRIPT] Error generating script: {str(e)}")
            raise Exception(f"Failed to generate conversation script: {str(e)}")

    def _build_script_prompt(
        self,
        telegram_data: Dict[str, Any],
        language: str,
        speaker1_role: str,
        speaker2_role: str,
        speaker1_gender: str,
        speaker2_gender: str,
        podcast_name: str,
        target_duration: int,
        additional_instructions: str,
    ) -> str:
        """Build the conversation script generation prompt with gender awareness"""
        
        # Build gender-aware language instructions
        if language.lower() in ['he', 'hebrew', 'heb']:
            language_instructions = f"""Generate the podcast script in Hebrew. 
                Use natural, conversational Hebrew with proper gender agreement. 
                VERY IMPORTANT: {speaker1_role} is {speaker1_gender} - use appropriate Hebrew grammar and expressions for {speaker1_gender}.
                VERY IMPORTANT: {speaker2_role} is {speaker2_gender} - use appropriate Hebrew grammar and expressions for {speaker2_gender}.
                Make sure verbs, adjectives, and personal expressions match each speaker's gender correctly.
                Use modern Hebrew expressions and speaking style appropriate for each gender.
                THE ENTIRE SCRIPT MUST BE IN HEBREW WITH CORRECT GENDER AGREEMENT."""
        else:
            language_instructions = f"""Generate the podcast script in {language}. 
                Use natural, conversational {language} with appropriate expressions for each speaker's gender.
                {speaker1_role} is {speaker1_gender} - use language and expressions that feel natural for a {speaker1_gender} speaker.
                {speaker2_role} is {speaker2_gender} - use language and expressions that feel natural for a {speaker2_gender} speaker.
                Make the conversation feel authentic with gender-appropriate speaking patterns and reactions.
                THE ENTIRE SCRIPT MUST BE IN {language}."""

        prompt = f"""You are an AI scriptwriter for a podcast called "{podcast_name}". 

Your task is to create an engaging, conversational podcast script between two speakers:
- {speaker1_role}: A {speaker1_gender} speaker
- {speaker2_role}: A {speaker2_gender} speaker

{language_instructions}

SPEAKER GENDER AWARENESS:
- Remember that {speaker1_role} is {speaker1_gender} - ensure all language, grammar, and expressions are appropriate
- Remember that {speaker2_role} is {speaker2_gender} - ensure all language, grammar, and expressions are appropriate
- In Hebrew, this is especially important for verb conjugations, adjectives, and personal expressions
- In any language, use natural speaking patterns and reactions appropriate for each gender

RAW TELEGRAM DATA TO ANALYZE AND CONVERT TO PODCAST:
{telegram_data}

DATA PROCESSING INSTRUCTIONS:
1. Analyze the raw Telegram data structure - look for 'results' containing channel messages
2. Extract meaningful content from text, urls, and media_description fields
3. Identify the most interesting, relevant, and discussion-worthy topics
4. Organize content by themes and importance - ignore spam or irrelevant messages
5. Focus on content that will create engaging podcast conversation

CONVERSATION PHILOSOPHY:
Let the content determine the natural length of the conversation. Some rich content deserves deep discussion, while lighter content should be covered more briefly.

CONVERSATION GUIDELINES:
1. Create a natural, flowing conversation between a {speaker1_gender} {speaker1_role} and a {speaker2_gender} {speaker2_role}
2. {speaker1_role} ({speaker1_gender}) acts as the host - introduces topics, asks questions, provides transitions
3. {speaker2_role} ({speaker2_gender}) acts as the expert/analyst - provides insights, explanations, and deeper analysis
4. Use gender-appropriate language patterns, reactions, and expressions for each speaker
5. Discuss content themes intelligently rather than just reading messages
6. Give appropriate time to each topic based on its value and interest level:
   - Rich, complex content: Deep dive with follow-up questions
   - Simple updates: Brief mention and quick analysis
   - Controversial or surprising content: Extended discussion
7. Include natural reactions that feel authentic for each speaker's gender and role
8. Add follow-up questions that explore implications and connections
9. Create smooth transitions between different content areas
10. Make it engaging with appropriate enthusiasm and intellectual curiosity
11. End naturally when the content has been fully explored

GENDER-SPECIFIC LANGUAGE REQUIREMENTS:
- In Hebrew: Use correct verb forms, adjectives, and particle agreements for each speaker's gender
- In all languages: Ensure expressions, reactions, and speaking style feel natural for each speaker
- Avoid language that contradicts the speaker's gender identity
- Make the conversation feel authentic and natural

CONTENT ORGANIZATION:
- Identify the main themes from the provided content (could be 1-5 themes depending on richness)
- Spend time proportional to each theme's value and complexity
- Connect different pieces of content when they relate to the same theme
- Highlight the most interesting or surprising information
- Discuss implications and broader context where relevant
- Don't artificially extend or compress - let the content breathe

{f"ADDITIONAL INSTRUCTIONS: {additional_instructions}" if additional_instructions else ""}

FORMAT: Return the script in this exact format:
{speaker1_role}: [natural opening that sets up today's discussion - using {speaker1_gender}-appropriate language]
{speaker2_role}: [engaging response that shows interest in the topics - using {speaker2_gender}-appropriate language]
{speaker1_role}: [transition to first major theme with context - maintaining {speaker1_gender} voice]
{speaker2_role}: [insightful analysis of the first theme - maintaining {speaker2_gender} voice]
[Continue natural conversation flow with proper gender language...]
{speaker1_role}: [thoughtful closing that ties themes together - {speaker1_gender} appropriate]

CRITICAL REMINDERS: 
- {speaker1_role} is {speaker1_gender} - ALL language must match this gender
- {speaker2_role} is {speaker2_gender} - ALL language must match this gender
- In Hebrew, this affects verb conjugations, adjectives, and personal expressions
- Make the conversation feel natural and authentic for both speakers
- Let content richness determine conversation length naturally

Begin the script now:"""

        return prompt
