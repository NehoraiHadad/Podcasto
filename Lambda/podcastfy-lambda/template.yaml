AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  podcastfy-lambda
  
  SAM Template for podcast generator Lambda function

Parameters:
  GeminiApiKey:
    Type: String
    Description: API Key for Gemini
    Default: ""
    NoEcho: true
  OpenAiApiKey:
    Type: String
    Description: API Key for OpenAI
    Default: ""
    NoEcho: true
  S3BucketName:
    Type: String
    Description: S3 Bucket Name for storing podcasts
    Default: ""
  SQSQueueArn:
    Type: String
    Description: ARN of the SQS queue for podcast processing
    Default: ""
  SupabaseUrl:
    Type: String
    Description: Supabase URL
    Default: ""
    NoEcho: true
  SupabaseKey:
    Type: String
    Description: Supabase API Key
    Default: ""
    NoEcho: true
  SNSTopicArn:
    Type: String
    Description: ARN of the SNS topic for completion notifications
    Default: ""
  SNSTopicName:
    Type: String
    Description: Name of the SNS topic (without ARN)
    Default: "podcast-completion-notification"
  ImageUri:
    Type: String
    Description: Full URI of the Docker image for the Lambda function
    Default: ${LAMBDA_IMAGE_URI}

Globals:
  Function:
    Timeout: 300
    MemorySize: 3008
    Environment:
      Variables:
        PYTHONPATH: /var/task
        GEMINI_API_KEY: !Ref GeminiApiKey
        OPENAI_API_KEY: !Ref OpenAiApiKey
        STORAGE_DIR: /tmp
        S3_BUCKET_NAME: !Ref S3BucketName
        SUPABASE_URL: !Ref SupabaseUrl
        SUPABASE_KEY: !Ref SupabaseKey
        SNS_TOPIC_ARN: !Ref SNSTopicArn

Resources:
  PodcastGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Ref ImageUri
      Architectures:
        - x86_64
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:PodcastGeneratorSecretsV2-*'
        - S3CrudPolicy:
            BucketName: !Ref S3BucketName
        - SQSPollerPolicy:
            QueueName: "podcast-processing-queue"
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /generate
            Method: post
            RestApiId: !Ref PodcastGeneratorApi
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref SQSQueueArn
            BatchSize: 1
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.12-v1

  PodcastGeneratorApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  PodcastGeneratorFunctionArn:
    Description: "Podcast Generator Lambda Function ARN"
    Value: !GetAtt PodcastGeneratorFunction.Arn
  PodcastGeneratorApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Podcast Generator function"
    Value: !Sub "https://${PodcastGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generate/"
  PodcastGeneratorFunctionRef:
    Description: "Podcast Generator Lambda Function"
    Value: !Ref PodcastGeneratorFunction 