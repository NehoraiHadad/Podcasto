AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  podcast-scheduler

  Lambda function to check which podcasts need new episodes based on their frequency

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    MemorySize: 512

Resources:
  PodcastSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          SUPABASE_URL: !Ref SupabaseUrl
          SUPABASE_KEY: !Ref SupabaseKey
          TELEGRAM_LAMBDA_NAME: !Ref TelegramLambdaName
          AUDIO_LAMBDA_NAME: !Ref AudioLambdaName
          SQS_QUEUE_URL: !Ref SQSQueueUrl
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref TelegramLambdaName
        - LambdaInvokePolicy:
            FunctionName: !Ref AudioLambdaName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PodcastProcessingQueue.QueueName
        - SQSReceiveMessagePolicy:
            QueueName: !GetAtt PodcastProcessingQueue.QueueName
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Name: DailyPodcastScheduler
            Description: Runs once a day to check which podcasts need new episodes
            Enabled: true

  PodcastProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: podcast-processing-queue
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PodcastProcessingDLQ.Arn
        maxReceiveCount: 3
  
  PodcastProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: podcast-processing-dlq
      MessageRetentionPeriod: 1209600 # 14 days in seconds

Parameters:
  SupabaseUrl:
    Type: String
    Description: Supabase URL
    NoEcho: true
  
  SupabaseKey:
    Type: String
    Description: Supabase API Key
    NoEcho: true
  
  TelegramLambdaName:
    Type: String
    Description: Name of the Telegram Lambda function
  
  AudioLambdaName:
    Type: String
    Description: Name of the Audio Generation Lambda function
  
  SQSQueueUrl:
    Type: String
    Description: URL of the SQS queue for podcast processing
    Default: ""

Outputs:
  PodcastSchedulerFunction:
    Description: "Podcast Scheduler Lambda Function ARN"
    Value: !GetAtt PodcastSchedulerFunction.Arn
  PodcastSchedulerFunctionIamRole:
    Description: "Implicit IAM Role created for Podcast Scheduler function"
    Value: !GetAtt PodcastSchedulerFunctionRole.Arn
  PodcastProcessingQueueURL:
    Description: "URL of the SQS queue for podcast processing"
    Value: !Ref PodcastProcessingQueue
  PodcastProcessingDLQURL:
    Description: "URL of the Dead Letter Queue for podcast processing"
    Value: !Ref PodcastProcessingDLQ 