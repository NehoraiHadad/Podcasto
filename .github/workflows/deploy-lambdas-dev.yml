name: Deploy Lambdas to Dev

on:
  push:
    branches:
      - master
    paths:
      - 'Lambda/**'
      - '.github/workflows/deploy-lambdas-dev.yml'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  # Job 1: Deploy shared layer first (all Lambdas depend on it)
  deploy-shared-layer:
    name: Deploy Shared Layer
    runs-on: ubuntu-latest
    outputs:
      layer_arn: ${{ steps.get-layer-arn.outputs.arn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build shared layer
        working-directory: Lambda/shared-layer
        run: sam build

      - name: Deploy shared layer
        working-directory: Lambda/shared-layer
        run: |
          sam deploy \
            --stack-name podcasto-shared-layer-${{ env.ENVIRONMENT }} \
            --no-confirm-changeset \
            --parameter-overrides "Environment=${{ env.ENVIRONMENT }}" \
            --capabilities CAPABILITY_IAM \
            --resolve-s3

      - name: Get new layer ARN
        id: get-layer-arn
        run: |
          LAYER_ARN=$(aws cloudformation describe-stacks \
            --stack-name podcasto-shared-layer-${{ env.ENVIRONMENT }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SharedLayerArn`].OutputValue' \
            --output text)
          echo "New layer ARN: $LAYER_ARN"
          echo "arn=$LAYER_ARN" >> $GITHUB_OUTPUT

  # Job 2: Deploy Lambda functions (build + deploy full Lambda code)
  deploy-lambdas:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    needs: deploy-shared-layer
    strategy:
      matrix:
        include:
          - lambda_name: telegram-lambda
            stack_name: podcasto-telegram-collector-v2
            function_name: podcasto-telegram-collector-v2-TelegramCollector-cIr2m4PMqK5i
          - lambda_name: script-preprocessor-lambda
            stack_name: podcasto-script-preprocessor-dev
            function_name: podcasto-script-preprocessor-dev
          - lambda_name: audio-generation-lambda
            stack_name: podcasto-audio-generation-dev
            function_name: podcasto-audio-generation-dev
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build ${{ matrix.lambda_name }}
        working-directory: Lambda/${{ matrix.lambda_name }}
        run: sam build

      - name: Deploy ${{ matrix.lambda_name }}
        working-directory: Lambda/${{ matrix.lambda_name }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
          INTERNAL_API_KEY: ${{ secrets.INTERNAL_API_KEY }}
        run: |
          sam deploy \
            --stack-name ${{ matrix.stack_name }} \
            --no-confirm-changeset \
            --capabilities CAPABILITY_IAM \
            --resolve-s3

      - name: Wait for ${{ matrix.function_name }} to be ready
        run: |
          echo "Waiting for ${{ matrix.function_name }} to finish updating..."
          aws lambda wait function-updated-v2 --function-name ${{ matrix.function_name }}
          echo "‚úÖ ${{ matrix.function_name }} deployed successfully"

  # Job 3: Verify deployment
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-lambdas

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify Lambda configurations
        run: |
          echo "Verifying deployed Lambdas..."

          # Check all 3 Lambda functions
          for lambda in \
            podcasto-telegram-collector-v2-TelegramCollector-cIr2m4PMqK5i \
            podcasto-script-preprocessor-dev \
            podcasto-audio-generation-dev; do

            echo "Checking $lambda..."
            CONFIG=$(aws lambda get-function-configuration --function-name $lambda)
            STATE=$(echo $CONFIG | jq -r '.State')
            LAST_UPDATE_STATUS=$(echo $CONFIG | jq -r '.LastUpdateStatus')
            LAST_MODIFIED=$(echo $CONFIG | jq -r '.LastModified')

            echo "  State: $STATE"
            echo "  Last Update Status: $LAST_UPDATE_STATUS"
            echo "  Last Modified: $LAST_MODIFIED"

            if [ "$STATE" != "Active" ] || [ "$LAST_UPDATE_STATUS" != "Successful" ]; then
              echo "‚ùå $lambda deployment failed!"
              exit 1
            fi
            echo "‚úÖ $lambda is healthy"
          done

          echo ""
          echo "üéâ All Lambdas deployed successfully!"
